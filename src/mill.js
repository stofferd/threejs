/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useLoader, useFrame, useThree, extend } from 'react-three-fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import {
    MeshBasicMaterial,
    MeshLambertMaterial,
    LineBasicMaterial,
} from 'three';
import logoUrl from './mill7.gltf';
import { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';

extend({ OutlinePass });

function Effect({ selectedObjects }) {
    const composer = React.useRef();
    const { scene, gl, size, camera } = useThree();
    const aspect = React.useMemo(
        () => new THREE.Vector2(size.width, size.height),
        [size],
    );
    React.useEffect(
        () => void composer.current.setSize(size.width, size.height),
        [size],
    );
    useFrame(() => composer.current.render(), 1);
    return (
        <effectComposer ref={composer} args={[gl]}>
            <renderPass
                attachArray="passes"
                scene={scene}
                camera={camera}
                antialias={true}
            />
            {/* <unrealBloomPass attachArray="passes" args={[aspect, 1, 1, 0]} /> */}
            <outlinePass
                attachArray="passes"
                args={[aspect, scene, camera]}
                selectedObjects={selectedObjects}
                visibleEdgeColor="white"
                edgeStrength={50}
                edgeThickness={10}
                edgeGlow={10}
                hiddenEdgeColor="#000000"
            />
        </effectComposer>
    );
}

export default function Model(props) {
    const groupRef = useRef();
    const { nodes } = useLoader(GLTFLoader, logoUrl);

    const edges1 = new THREE.EdgesGeometry(nodes.pCube1.geometry);
    const edges2 = new THREE.EdgesGeometry(nodes.pasted__pCube1.geometry);
    const edges3 = new THREE.EdgesGeometry(nodes.pCone1.geometry);
    console.log({ edges1 });
    console.log({ edges2 });

    console.log({ edges3 });
    console.log(Object.values(nodes));

    return (
        <group ref={groupRef} {...props} dispose={null}>
            <spotLight
                intensity={0.1}
                fov={75}
                position={[0.1, -0.1, 0.1]}
                penumbra={1}
            />
            <ambientLight intensity={0.01} />

            <lineSegments
                material={
                    new LineBasicMaterial({ color: 'red', linewidth: 10 })
                }
                // material={testMaterial}
                // geometry={nodes.pCube1.geometry}
                geometry={edges1}
                position={[0, 0.1, 0]}
                rotation={[0.72, 0, 0]}
                scale={[1.3, 27.13, 5.01]}
            />
            <lineSegments
                material={
                    new LineBasicMaterial({ color: 'red', linewidth: 10 })
                }
                // material={testMaterial}
                // geometry={nodes.pasted__pCube1.geometry}
                geometry={edges2}
                position={[0, 0.1, 0]}
                rotation={[2.43, 0, 0]}
                scale={[1.3, 27.13, 5.01]}
            />
            <lineSegments
                material={
                    new LineBasicMaterial({ color: 'red', linewidth: 10 })
                }
                // material={testMaterial}
                // geometry={nodes.pCone1.geometry}
                geometry={edges3}
                position={[0, 0, 0]}
                scale={[10.61, 6.25, 10.97]}
            />

            <mesh
                material={new MeshLambertMaterial({ color: '0x000000' })}
                // material={testMaterial}
                geometry={nodes.pCube1.geometry}
                position={[0, 0.1, 0]}
                rotation={[0.72, 0, 0]}
                scale={[1.3, 27.13, 5.01]}
            />
            <mesh
                material={new MeshLambertMaterial({ color: '0x000000' })}
                // material={testMaterial}
                geometry={nodes.pasted__pCube1.geometry}
                position={[0, 0.1, 0]}
                rotation={[2.43, 0, 0]}
                scale={[1.3, 27.13, 5.01]}
            />
            <mesh
                material={new MeshLambertMaterial({ color: '0x000000' })}
                // material={testMaterial}
                geometry={nodes.pCone1.geometry}
                position={[0, 0, 0]}
                scale={[10.61, 6.25, 10.97]}
            />
            <Effect
                selectedObjects={
                    // THREE.getObjectByName('pCube1')
                    nodes && nodes[1] ? [nodes[1], nodes[2], nodes[3]] : []
                }
            />
        </group>
    );
}
