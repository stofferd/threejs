/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useLoader } from 'react-three-fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import {
    MeshBasicMaterial,
    MeshLambertMaterial,
    LineBasicMaterial,
} from 'three';
import logoUrl from './mill6.gltf';

const vertexShader = `
    varying vec2 vUv;
    void main()	{
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
    }
`;

const fragmentShader = `
    #extension GL_OES_standard_derivatives : enable

    varying vec2 vUv;
    uniform float thickness;

    float edgeFactor(vec2 p){
    vec2 grid = abs(fract(p - 0.5) - 0.5) / fwidth(p) / thickness;
    return min(grid.x, grid.y);
    }

    void main() {
        
        float a = edgeFactor(vUv);

        vec3 c = mix(vec3(1), vec3(0), a);

        gl_FragColor = vec4(c, 1.0);
    }
`;

export default function Model(props) {
    const groupRef = useRef();
    const { nodes } = useLoader(GLTFLoader, logoUrl);
    const testMaterial = new THREE.ShaderMaterial({
        uniforms: {
            thickness: {
                value: 1.5,
            },
        },
        vertexShader: vertexShader,
        fragmentShader: fragmentShader,
    });
    const edges1 = new THREE.EdgesGeometry(nodes.pCube1.geometry);
    const edges2 = new THREE.EdgesGeometry(nodes.pasted__pCube1.geometry);
    const edges3 = new THREE.EdgesGeometry(nodes.pCone1.geometry);
    console.log({ edges1 });
    console.log({ edges2 });

    console.log({ edges3 });

    return (
        <group ref={groupRef} {...props} dispose={null}>
            <spotLight
                intensity={0.1}
                fov={75}
                position={[0.1, -0.1, 0.1]}
                penumbra={1}
            />
            <ambientLight intensity={0.01} />

            <lineSegments
                material={new LineBasicMaterial({ color: 'red' })}
                // material={testMaterial}
                // geometry={nodes.pCube1.geometry}
                geometry={edges1}
                position={[0, 0.04, 0]}
                rotation={[0.72, 0, 0]}
                scale={[0.58, 12.12, 2.24]}
            />
            <lineSegments
                material={new LineBasicMaterial({ color: 'red' })}
                // material={testMaterial}
                // geometry={nodes.pasted__pCube1.geometry}
                geometry={edges2}
                position={[0.01, 0.04, 0]}
                rotation={[2.43, 0, 0]}
                scale={[0.58, 12.12, 2.24]}
            />
            <lineSegments
                material={new LineBasicMaterial({ color: 'red' })}
                // material={testMaterial}
                // geometry={nodes.pCone1.geometry}
                geometry={edges3}
                position={[0, 0, 0]}
                scale={[4.74, 2.79, 4.9]}
            />

            <mesh
                material={new MeshLambertMaterial({ color: 'black' })}
                // material={testMaterial}
                geometry={nodes.pCube1.geometry}
                position={[0, 0.04, 0]}
                rotation={[0.72, 0, 0]}
                scale={[0.58, 12.12, 2.24]}
            />
            <mesh
                material={new MeshLambertMaterial({ color: 'black' })}
                // material={testMaterial}
                geometry={nodes.pasted__pCube1.geometry}
                position={[0.01, 0.04, 0]}
                rotation={[2.43, 0, 0]}
                scale={[0.58, 12.12, 2.24]}
            />
            <mesh
                material={new MeshLambertMaterial({ color: 'black' })}
                // material={testMaterial}
                geometry={nodes.pCone1.geometry}
                position={[0, 0, 0]}
                scale={[4.74, 2.79, 4.9]}
            />
        </group>
    );
}
